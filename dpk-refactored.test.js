const { deterministicPartitionKey } = require("./dpk-refactored");

describe("deterministicPartitionKey", () => {
  it("Returns the literal '0' when given no input", () => {
    const trivialKey = deterministicPartitionKey();
    expect(trivialKey).toBe("0");
  });

  it("should return event partition key if it exists", () => {
    const event = { partitionKey: "testKey" };
    expect(deterministicPartitionKey(event)).toBe("testKey");
  });

  it("should return hashed event data if partition key does not exist", () => {
    const event = { data: "testData" };
    /* expected hashed value */
    const expected =
      "a178b6bbc1a3b9f054bc0a5c4b2a6a5ed44ace1be361f4ad8174d7f9f77735d0069b93f34de0cb90fd8fefd8d973b29b6a7c4395a96f2397a8708531d6f49940";
    expect(deterministicPartitionKey(event)).toBe(expected);
  });

  it("should return hashed candidate if its length exceeds max allowed length", () => {
    const event = {
      partitionKey:
        "A long partitionKey must be greater that 256 characters to test the MAX_PARTITION_KEY_LENGTH condition in the `deterministicPartitionKey` function. This long partitionKey will be replaced with it's hash (event partitionKey's hash). This hashing function is generated by the crypto library.",
    };
    /* expected hashed value */
    const expected =
      "ddd15f8c34a50e572e478a3b74ea5d2f9921292601436cf3dadb922f20a412c442ce9ef6b255b8c4d4f5bb9e1a609b7d75fa1b8b40eea5856fffc57a463f80c1";
    expect(deterministicPartitionKey(event)).toBe(expected);
  });

  it("should return stringified candidate if not a string", () => {
    const event = { partitionKey: { key: "testKey" } };
    const expected = '{"key":"testKey"}';
    expect(deterministicPartitionKey(event)).toBe(expected);
  });
});
